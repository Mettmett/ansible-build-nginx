---
# tasks/main.yml

- name: (sys) update host apt cache
  apt:
    cache_valid_time: 3600
    update_cache: true

- name: (sys) install sys tools and needed libs
  apt:
    install_recommends: false
    name: "{{ item }}"
    state: present
  loop:
    - build-essential
    - curl
    - git
    - libbz2-dev
    - libgeoip-dev
    - libpcre3
    - libpcre3-dev
    - libssl-dev
    - libxslt1-dev
    - rsync
    - tar
    - unzip
    - zlib1g-dev

- name: (build) create folders for sources builds
  file:
    mode: 0755
    path: "{{ item }}"
    state: directory
  loop:
    - "/usr/src/{{ nginx_version }}"
    - "/usr/src/headers-more-nginx-module-0.33"
    - "/usr/src/naxsi"
    - "/usr/src/ngx_brotli"
    - "/usr/src/openssl"

- name: (build) download nginx sources
  get_url:
    dest: "/usr/src/{{ nginx_version }}.tar.gz"
    url: "https://nginx.org/download/{{ nginx_version }}.tar.gz"
  register: nginx_source

- name: (build) unpack nginx sources
  unarchive:
    copy: false
    dest: "/usr/src/{{ nginx_version }}"
    src: "{{ nginx_source.dest }}"
  register: nginx_source_unpack

- name: (build) download latest OpenSSL
  git:
    dest: "/usr/src/openssl"
    repo: "https://github.com/openssl/openssl.git"
    version: "{{ openssl_version }}"

- name: (build) download latest naxsi
  git:
    dest: "/usr/src/naxsi"
    repo: "https://github.com/nbs-system/naxsi.git"
    version: "master"

- name: (build) download latest Brotli
  git:
    dest: "/usr/src/ngx_brotli"
    repo: "https://github.com/google/ngx_brotli.git"
    version: "master"

- name: (build) download latest nginx module headers_more
  get_url:
    dest: "/usr/src/headers-more-nginx-module-0.33.tar.gz"
    url: "https://github.com/openresty/headers-more-nginx-module/archive/v0.33.tar.gz"

- name: (build) unpack nginx module headers_more
  unarchive:
    copy: false
    dest: "/usr/src/headers-more-nginx-module-0.33"
    src: "/usr/src/headers-more-nginx-module-0.33.tar.gz"
  register: nginx_module_headers_unpack

- name: (build) configure nginx sources
  args:
    chdir: "/usr/src/{{ nginx_version }}/{{ nginx_version }}"
  command: "./configure {{ nginx_openssl_module }} \
  --with-ld-opt=-lrt {{ nginx_cache_conf_dir }} \
  --user={{ nginx_user }} --group={{ nginx_user }} \
  --prefix={{ nginx_conf_dir }} \
  --error-log-path={{ nginx_var_log_dir }}/nginx-error.log \
  --http-log-path={{ nginx_var_log_dir }}/nginx-access.log \
  --sbin-path=/usr/sbin/nginx \
  --conf-path={{ nginx_conf_dir }}/nginx.conf {{ nginx_misc_modules }} {{ nginx_headers_more_module }} {{ nginx_brotli_module }} {{ nginx_naxsi_module }}"

- name: (build) make nginx sources great again
  args:
    chdir: "/usr/src/{{ nginx_version }}/{{ nginx_version }}"
  shell: "make && make install"

- name: (build) Adding some Naxsi core rules from sources
  copy:
    dest: "/etc/nginx/naxsi_core.rules"
    group: "root"
    mode: u+rw,g-wx,o-wx
    owner: "root"
    remote_src: true
    src: "/usr/src/naxsi/naxsi_config/naxsi_core.rules"

- name: (sys) install logrotate
  apt:
    install_recommends: false
    name: "logrotate"
    state: present

- name: (sys) installing our nginx logrotate configuration
  template:
    dest: "/etc/logrotate.d/nginx"
    group: "root"
    mode: u+rw,g-wx,o-wx
    owner: "root"
    src: "templates/logrotate.nginx.j2"

- name: (sys) installing our nginx configuration
  template:
    dest: "/etc/nginx/nginx.conf"
    group: "root"
    mode: u+rw,g-wx,o-wx
    owner: "root"
    src: "templates/nginx.conf.j2"

- name: (sys) create needed folders for nginx configuration
  file:
    mode: 0755
    path: "{{ item }}"
    state: directory
  loop:
    - "/etc/nginx/sites-available"
    - "/etc/nginx/sites-enabled"
    - "/usr/local/etc/nginx"
    - "var/log/nginx/"

- name: (sys) creating a default root folder for web apps
  file:
    group: "www-data"
    mode: 0755
    owner: "www-data"
    path: "/var/www/htdocs"
    state: directory

- name: (sys) installing a basic nginx vhost
  template:
    dest: "/etc/nginx/sites-available/default.conf"
    group: "root"
    mode: u+rw,g-wx,o-wx
    owner: "root"
    src: "templates/default.conf.j2"

- name: (sys) installing nginx status page vhost
  template:
    dest: "/etc/nginx/sites-available/status.conf"
    group: "root"
    mode: u+rw,g-wx,o-wx
    owner: "root"
    src: "templates/status.conf.j2"

- name: Create a symbolic link
  file:
    dest: "/etc/nginx/sites-enabled/default.conf"
    group: "root"
    owner: "root"
    src: "/etc/nginx/sites-available/default.conf"
    state: link

- name: Create a symbolic link for status page
  file:
    dest: "/etc/nginx/sites-enabled/status.conf"
    group: "root"
    owner: "root"
    src: "/etc/nginx/sites-available/status.conf"
    state: link

- name: (sys) installing a basic html file
  template:
    dest: "/var/www/htdocs/index.html"
    group: "www-data"
    mode: u+rw,g-wx,o-wx
    owner: "www-data"
    src: "templates/index.html.j2"

- name: (build) cleaning sources
  args:
    warn: false
  shell: |
    rm -fr /usr/src/headers-more-nginx*
    rm -fr /usr/src/naxsi*
    rm -fr /usr/src/nginx*
    rm -fr /usr/src/ngx_brotli*
    rm -fr /usr/src/openssl*

- name: (sys) installing systemd unit
  template:
    dest: "/lib/systemd/system/nginx.service"
    group: "root"
    mode: a+x
    owner: "root"
    src: "templates/nginx.services.j2"

- name: start nginx
  systemd:
    daemon_reload: true
    enabled: true
    masked: false
    name: "nginx"
    state: started

- name: (sys) uninstall dev tools and libs
  apt:
    name: "{{ item }}"
    state: absent
  loop:
    - build-essential
    - libbz2-dev
    - libgeoip-dev
    - libpcre3-dev
    - libssl-dev
    - libxslt1-dev
    - zlib1g-dev
