---
# tasks/main.yml

- name: Compile NGINX from sources
  hosts: all
  become: true
  vars:
    nginx_version: "nginx-1.19.10"
    nginx_user: "www-data"
    nginx_conf_dir: "/etc/nginx"
    nginx_var_log_dir: "/var/log/nginx"
    nginx_cache_conf_dir: "--http-client-body-temp-path=/usr/local/etc/nginx/body --http-fastcgi-temp-path=/usr/local/etc/nginx/fastcgi --http-proxy-temp-path=/usr/local/etc/nginx/proxy --http-scgi-temp-path=/usr/local/etc/nginx/scgi --http-uwsgi-temp-path=/usr/local/etc/nginx/uwsgi"
    nginx_misc_modules: "--with-pcre-jit --with-http_v2_module --with-debug --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_gzip_static_module --with-http_sub_module --with-http_xslt_module --with-file-aio --with-threads --with-http_ssl_module --with-http_geoip_module"
    nginx_openssl_module: "--with-openssl=/usr/src/openssl --with-openssl-opt=enable-tls1_3"
    nginx_brotli_module: "--add-module=/usr/src/ngx_brotli"
    nginx_naxsi_module: "--add-module=/usr/src/naxsi/naxsi_src"
    nginx_headers_more_module: "--add-module=/usr/src/headers-more-nginx-module-0.33/headers-more-nginx-module-0.33"
    openssl_version: "OpenSSL_1_1_1-stable"

  tasks:
    - name: (sys) update host apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600

    - name: (sys) install sys tools
      apt:
        name: "{{ item }}"
        state: present
        install_recommends: false
      loop:
        - tar
        - unzip
        - curl
        - git
        - rsync

    - name: (sys) install build tools
      apt:
        name: build-essential
        state: present
        install_recommends: false

    - name: (sys) install needed libs
      apt:
        name: "{{ item }}"
        state: present
        install_recommends: false
      loop:
        - libgeoip-dev
        - libxslt1-dev
        - libpcre3
        - libpcre3-dev
        - zlib1g-dev
        - libbz2-dev
        - libssl-dev

    - name: (build) cleaning old sources
      args:
        warn: false
      shell: |
        rm -fr /usr/src/nginx*
        rm -fr /usr/src/openssl
        rm -fr /usr/src/ngx_brotli
        rm -fr /usr/src/naxsi
        rm -fr /usr/src/headers-more-nginx-module-0.33

    - name: (build) download nginx sources
      get_url:
        url: "https://nginx.org/download/{{ nginx_version }}.tar.gz"
        dest: "/usr/src/{{ nginx_version }}.tar.gz"
      register: nginx_source

    - name: (build) create the folder for nginx sources
      file:
        path: "/usr/src/{{ nginx_version }}"
        state: directory
        mode: "0755"

    - name: (build) unpack nginx sources
      unarchive:
        copy: false
        dest: "/usr/src/{{ nginx_version }}"
        src: "{{ nginx_source.dest }}"
      register: nginx_source_unpack

    - name: (build) create the folder for openssl sources
      file:
        path: "/usr/src/openssl"
        state: directory
        mode: "0755"

    - name: (build) download latest OpenSSL
      git:
        repo: "https://github.com/openssl/openssl.git"
        dest: "/usr/src/openssl"
        version: "{{ openssl_version }}"

    - name: (build) create the folder for naxsi sources
      file:
        path: "/usr/src/naxsi"
        state: directory
        mode: "0755"

    - name: (build) download latest naxsi
      git:
        repo: "https://github.com/nbs-system/naxsi.git"
        dest: "/usr/src/naxsi"
        version: "master"

    - name: (build) create the folder for brotli sources
      file:
        path: "/usr/src/ngx_brotli"
        state: directory
        mode: "0755"

    - name: (build) download latest Brotli
      git:
        repo: "https://github.com/google/ngx_brotli.git"
        dest: "/usr/src/ngx_brotli"
        version: "master"
        # git submodule update --init

    - name: (build) download latest nginx module headers_more
      get_url:
        url: "https://github.com/openresty/headers-more-nginx-module/archive/v0.33.tar.gz"
        dest: "/usr/src/headers-more-nginx-module-0.33.tar.gz"

    - name: (build) create the folder for nginx headers more module
      file:
        path: "/usr/src/headers-more-nginx-module-0.33"
        state: directory
        mode: "0755"

    - name: (build) unpack nginx module headers_more
      unarchive:
        copy: false
        dest: "/usr/src/headers-more-nginx-module-0.33"
        src: "/usr/src/headers-more-nginx-module-0.33.tar.gz"
      register: nginx_module_headers_unpack

    - name: (build) configure nginx sources
      args:
        chdir: "/usr/src/{{ nginx_version }}/{{ nginx_version }}"
      command: "./configure {{ nginx_openssl_module }} --with-ld-opt=-lrt {{ nginx_cache_conf_dir }} --user={{ nginx_user }} --group={{ nginx_user }} --prefix={{ nginx_conf_dir }} --error-log-path={{ nginx_var_log_dir }}/nginx-error.log --http-log-path={{ nginx_var_log_dir }}/nginx-access.log --sbin-path=/usr/sbin/nginx --conf-path={{ nginx_conf_dir }}/nginx.conf {{ nginx_misc_modules }} {{ nginx_headers_more_module }} {{ nginx_brotli_module }} {{ nginx_naxsi_module }}"

    - name: (build) make nginx sources great again
      args:
        chdir: "/usr/src/{{ nginx_version }}/{{ nginx_version }}"
      shell: "make && make install"

    - name: (build) Adding some Naxsi core rules from sources
      copy:
        src: "/usr/src/naxsi/naxsi_config/naxsi_core.rules"
        dest: "/etc/nginx/naxsi_core.rules"
        remote_src: true
        owner: "root"
        group: "root"
        mode: u+rw,g-wx,o-wx

    - name: (sys) remove previous systemd unit file if exists
      file:
        path: "/lib/systemd/system/nginx.service"
        state: absent

    - name: (sys) create an empty systemd unit file
      file:
        path: "/lib/systemd/system/nginx.service"
        state: touch

    - name: (sys) installing systemd unit
      template:
        src: "{{ lookup('file', '{{ playbook_dir }}/templates/nginx.services.j2') }}"
        dest: "/lib/systemd/system/nginx.service"
        owner: "root"
        group: "root"
        mode: a+x

    - name: (sys) enabling nginx systemd unit file
      systemd:
        name: "nginx"
        enabled: true
        masked: false

    - name: (sys) install logrotate
      apt:
        name: "logrotate"
        state: present
        install_recommends: false

    - name: (sys) remove previous nginx logrotate configuration file if exists
      file:
        path: "/etc/logrotate/nginx"
        state: absent

    - name: (sys) create empty nginx logrotate configuration file
      file:
        path: "/etc/logrotate/nginx"
        state: touch

    - name: (sys) installing our nginx logrotate configuration
      template:
        src: "{{ lookup('file', '{{ playbook_dir }}/templates/logrotate.nginx.j2') }}"
        dest: "/etc/logrotate/nginx"
        owner: "root"
        group: "root"
        mode: u+rw,g-wx,o-wx

    - name: (sys) installing our nginx configuration
      template:
        src: "{{ lookup('file', '{{ playbook_dir }}/templates/nginx.conf.j2') }}"
        dest: "/etc/nginx/nginx.conf"
        owner: "root"
        group: "root"
        mode: u+rw,g-wx,o-wx

    - name: (sys) create needed folders for nginx configuration
      file:
        path: "/etc/nginx/{{ items }}"
        state: directory
        mode: "0755"
      with_items:
        - conf.d
        - sites-available
        - sites-enabled

    - name: (sys) create cache folder for nginx
      file:
        path: "/usr/local/etc/nginx"
        state: directory
        mode: "0755"

    - name: (sys) start nginx to the moon
      systemd:
        name: "nginx"
        state: restarted
        dameon_reload: true

    - name: (sys) cleaning sources
      args:
        warn: false
      shell: "rm /usr/src/*.tar.gz"
